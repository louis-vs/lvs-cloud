name: Deploy Infrastructure

on:
  push:
    branches: [master]
    paths:
      - 'infrastructure/**'
      - 'applications/monitoring-stack/**'
      - 'applications/registry/**'
      - 'applications/ruby-monitor/docker-compose.prod.yml'
      - 'traefik/**'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_VAR_project_name: 'lvs-cloud'
  TF_VAR_domain: 'lvs.me.uk'
  TF_VAR_registry_user: ${{ secrets.REGISTRY_USERNAME }}
  TF_VAR_registry_pass: ${{ secrets.REGISTRY_PASSWORD }}
  # AWS credentials for S3 backend (Hetzner Object Storage)
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}

# Token Strategy:
# - HCLOUD_TOKEN_RO: Read-only operations (fmt, init, validate, outputs)
# - HCLOUD_TOKEN_RW: Read-write operations (plan, apply)

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      server_ip: ${{ steps.terraform-output.outputs.server_ip }}

    defaults:
      run:
        working-directory: infrastructure

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.0'

      - name: Terraform Format
        run: terraform fmt -check
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Validate
        run: terraform validate
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}

      - name: Show Plan Summary
        run: terraform show tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "server_ip=$(terraform output -raw server_ip)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

  deploy-traefik:
    name: 'Deploy Shared Traefik'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() && !failure()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy shared Traefik configuration
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Wait for cloud-init to complete
            echo "⏳ Waiting for system setup to complete..."
            sudo cloud-init status --wait || {
              echo "❌ Cloud-init failed or timed out"
              exit 1
            }

            # Verify Docker is available
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker is not available"
              exit 1
            fi

            # Create directories if they don't exist
            sudo mkdir -p /opt/traefik
            sudo mkdir -p /etc/traefik
            sudo chown ubuntu:ubuntu /opt/traefik

            # Update shared Traefik
            cd /opt/traefik

            # Download latest traefik configuration files
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/traefik/docker-compose.yml

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o /tmp/traefik.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/traefik/traefik.yml

            # Update Traefik static configuration
            sudo cp /tmp/traefik.yml /etc/traefik/traefik.yml

            # Restart Traefik (must be done first before other services)
            sudo docker compose up -d --remove-orphans

            echo "✅ Shared Traefik updated successfully"

  deploy-registry:
    name: 'Deploy Registry'
    runs-on: ubuntu-latest
    needs: [terraform, deploy-traefik]
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy registry
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Verify prerequisites are met
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker is not available"
              exit 1
            fi

            # Create directories if they don't exist
            sudo mkdir -p /opt/registry
            sudo chown ubuntu:ubuntu /opt/registry

            # Update registry
            cd /opt/registry

            # Download latest docker-compose file
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/applications/registry/docker-compose.yml

            # Start registry service
            sudo docker compose up -d --remove-orphans

            echo "✅ Registry deployed successfully"

  deploy-stack:
    name: 'Deploy Monitoring Stack'
    runs-on: ubuntu-latest
    needs: [terraform, deploy-traefik]
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy monitoring stack
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Verify prerequisites are met
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker is not available"
              exit 1
            fi

            # Create directories if they don't exist
            sudo mkdir -p /opt/monitoring-stack
            sudo chown ubuntu:ubuntu /opt/monitoring-stack

            # Update monitoring stack
            cd /opt/monitoring-stack

            # Download latest docker-compose file
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/applications/monitoring-stack/docker-compose.prod.yml

            # Stop existing services first to avoid conflicts
            sudo docker compose down 2>/dev/null || true

            # Remove potentially conflicting networks (they'll be recreated correctly)
            sudo docker network rm monitoring 2>/dev/null || true

            # Start services (Traefik is already running)
            sudo docker compose up -d --remove-orphans

            echo "✅ Monitoring stack updated successfully"

  deploy-apps:
    name: 'Deploy Applications'
    runs-on: ubuntu-latest
    needs: [terraform, deploy-registry]
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled() && !failure()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Ruby monitor application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Verify prerequisites are met
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker is not available"
              exit 1
            fi

            # Create directories if they don't exist
            sudo mkdir -p /opt/apps/ruby-monitor
            sudo chown ubuntu:ubuntu /opt/apps/ruby-monitor

            # Update Ruby monitor app
            cd /opt/apps/ruby-monitor

            # Download latest docker-compose file
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/applications/ruby-monitor/docker-compose.prod.yml

            # Login to registry
            echo "${{ secrets.REGISTRY_PASSWORD }}" | sudo docker login registry.lvs.me.uk -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

            # Pull latest image and restart application
            sudo docker compose pull
            sudo docker compose up -d --remove-orphans

            echo "✅ Ruby monitor application deployed successfully"
