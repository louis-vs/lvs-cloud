name: Deploy Infrastructure & Applications

on:
  push:
    branches: [master]
    paths:
      - 'infrastructure/**'
      - 'platform/**'
      - 'applications/**'
  workflow_dispatch:
    inputs:
      deploy_everything:
        description: 'Deploy entire stack (infrastructure, platform, and all apps)'
        required: false
        type: boolean
        default: false
      deploy_apps_only:
        description: 'Force deploy applications only (skip infrastructure/platform)'
        required: false
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_VAR_project_name: 'lvs-cloud'
  TF_VAR_domain: 'lvs.me.uk'
  TF_VAR_registry_user: ${{ secrets.REGISTRY_USERNAME }}
  TF_VAR_registry_pass: ${{ secrets.REGISTRY_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
  REGISTRY_URL: registry.lvs.me.uk

jobs:
  infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    outputs:
      server_ip: ${{ steps.terraform-output.outputs.server_ip }}
      changed: ${{ steps.check-changes.outputs.changed }}

    defaults:
      run:
        working-directory: infrastructure

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for infrastructure changes
        id: check-changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Manual deployment of everything requested"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # Check if infrastructure files changed
          git diff --name-only HEAD^ HEAD | grep "^infrastructure/" || {
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          }
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.0'

      - name: Terraform Format
        run: terraform fmt -check
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Validate
        run: terraform validate
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan -detailed-exitcode
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}
        continue-on-error: true

      - name: Show Plan Summary
        run: terraform show tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Request Approval for Infrastructure Changes
        if: steps.plan.outputs.exitcode == '2'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: 'Infrastructure Deployment Approval Required'
          issue-body: |
            **Infrastructure changes detected!**

            Terraform plan shows changes will be made to the infrastructure.

            **Review the plan output above** and approve this deployment to proceed.

            - **Branch**: `${{ github.ref_name }}`
            - **Commit**: `${{ github.sha }}`
            - **Triggered by**: ${{ github.event_name }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2')
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "server_ip=$(terraform output -raw server_ip)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

  platform-traefik:
    name: 'Deploy Traefik'
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Traefik"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Traefik"
            exit 0
          fi

          # Check if traefik files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/traefik/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Traefik files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Upload Traefik deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "platform/traefik/*"
          target: "/tmp/deploy-traefik"
          strip_components: 2

      - name: Execute Traefik deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /tmp/deploy-traefik

            # Make deploy script executable and run it
            chmod +x deploy.sh
            ./deploy.sh

            # Cleanup
            rm -rf /tmp/deploy-traefik

            echo "🎉 Traefik deployment completed"

  platform-registry:
    name: 'Deploy Registry'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Registry"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Registry"
            exit 0
          fi

          # Check if registry files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/registry/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Registry files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Upload Registry deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "platform/registry/*"
          target: "/tmp/deploy-registry"
          strip_components: 2

      - name: Execute Registry deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY_USERNAME,REGISTRY_PASSWORD
          script: |
            set -e
            cd /tmp/deploy-registry

            # Make deploy script executable and run it
            chmod +x deploy.sh
            export REGISTRY_USERNAME="${{ secrets.REGISTRY_USERNAME }}"
            export REGISTRY_PASSWORD="${{ secrets.REGISTRY_PASSWORD }}"
            ./deploy.sh

            # Cleanup
            rm -rf /tmp/deploy-registry

            echo "🎉 Registry deployment completed"

  platform-watchtower:
    name: 'Deploy Watchtower'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-monitoring, platform-registry]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Watchtower"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Watchtower"
            exit 0
          fi

          # Check if watchtower files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/watchtower/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Watchtower files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Upload Watchtower deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "platform/watchtower/*"
          target: "/tmp/deploy-watchtower"
          strip_components: 2

      - name: Execute Watchtower deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY_USERNAME,REGISTRY_PASSWORD
          script: |
            set -e
            cd /tmp/deploy-watchtower

            # Make deploy script executable and run it
            chmod +x deploy.sh
            export REGISTRY_USERNAME="${{ secrets.REGISTRY_USERNAME }}"
            export REGISTRY_PASSWORD="${{ secrets.REGISTRY_PASSWORD }}"
            ./deploy.sh

            # Cleanup
            rm -rf /tmp/deploy-watchtower

            echo "🎉 Watchtower deployment completed"

  platform-postgresql:
    name: 'Deploy PostgreSQL'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik, platform-monitoring]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying PostgreSQL"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying PostgreSQL"
            exit 0
          fi

          # Check if postgresql files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/postgresql/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "PostgreSQL files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Upload PostgreSQL deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "platform/postgresql/*"
          target: "/tmp/deploy-postgresql"
          strip_components: 2

      - name: Execute PostgreSQL deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /tmp/deploy-postgresql

            # Make deploy script executable and run it
            chmod +x deploy.sh
            export POSTGRES_ADMIN_PASSWORD="${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
            export POSTGRES_RUBY_PASSWORD="${{ secrets.POSTGRES_RUBY_PASSWORD }}"
            export POSTGRES_TS_PASSWORD="${{ secrets.POSTGRES_TS_PASSWORD }}"
            export POSTGRES_PYTHON_PASSWORD="${{ secrets.POSTGRES_PYTHON_PASSWORD }}"
            export POSTGRES_GO_PASSWORD="${{ secrets.POSTGRES_GO_PASSWORD }}"
            ./deploy.sh

            # Cleanup
            rm -rf /tmp/deploy-postgresql

            echo "🎉 PostgreSQL deployment completed"

  platform-monitoring:
    name: 'Deploy Monitoring'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik]
    if: always() && !cancelled() && !failure()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Upload Monitoring deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "platform/monitoring/*"
          target: "/tmp/deploy-monitoring"
          strip_components: 2

      - name: Execute Monitoring deployment script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /tmp/deploy-monitoring

            # Make deploy script executable and run it
            chmod +x deploy.sh
            export GRAFANA_ADMIN_USER="admin"
            export GRAFANA_ADMIN_PASS="${{ secrets.GRAFANA_ADMIN_PASS }}"
            ./deploy.sh

            # Cleanup
            rm -rf /tmp/deploy-monitoring

            echo "🎉 Monitoring deployment completed"

  initial-app-deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-registry, platform-watchtower, platform-postgresql]
    if: always() && !cancelled() && !failure()
    strategy:
      matrix:
        app: ["ruby-demo-app"]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for application changes
        id: check-changes
        run: |
          APP_NAME="${{ matrix.app }}"

          # For workflow_dispatch, check the input flags
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.deploy_everything }}" == "true" || "${{ inputs.deploy_apps_only }}" == "true" ]]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Manual deployment requested for $APP_NAME"
              exit 0
            fi
          fi

          # For push events, check if application files changed
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if git diff --name-only HEAD^ HEAD | grep "^applications/$APP_NAME/"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Application files changed for $APP_NAME"
              exit 0
            fi
          fi

          # Check if infrastructure changed (initial deployment scenario)
          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, deploying $APP_NAME"
            exit 0
          fi

          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected for $APP_NAME, skipping deployment"

      - name: Get server IP
        if: steps.check-changes.outputs.changed == 'true'
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "❌ Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Prepare deployment directory
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          cd applications/${{ matrix.app }}

          # Install envsubst if not available
          if ! command -v envsubst &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y gettext-base
          fi

          # Generate .env from template with secrets
          export POSTGRES_RUBY_PASSWORD="${{ secrets.POSTGRES_RUBY_PASSWORD }}"
          envsubst < .env.template > .env

          # Verify .env was created
          if [ ! -f .env ]; then
            echo "❌ Error: Failed to create .env file"
            exit 1
          fi

          echo "✅ Environment file created successfully"

      - name: Deploy application via SSH
        if: steps.check-changes.outputs.changed == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "applications/${{ matrix.app }}/*"
          target: "/tmp/deploy-${{ matrix.app }}"
          strip_components: 2

      - name: Execute deployment script
        if: steps.check-changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_RUBY_PASSWORD,REGISTRY_PASSWORD,REGISTRY_USERNAME
          script: |
            set -e
            APP_NAME="${{ matrix.app }}"
            APP_DIR="/opt/apps/$APP_NAME"

            echo "🚀 Deploying $APP_NAME..."

            # Create app directory and move files
            sudo mkdir -p "$APP_DIR"
            sudo chown -R ubuntu:ubuntu "$APP_DIR"
            sudo cp -rf "/tmp/deploy-$APP_NAME/"* "$APP_DIR/"
            sudo chown -R ubuntu:ubuntu "$APP_DIR"
            cd "$APP_DIR"

            # Login to registry
            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login registry.lvs.me.uk \
                -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

            # Make deploy script executable and run it
            chmod +x deploy.sh
            export POSTGRES_RUBY_PASSWORD="${{ secrets.POSTGRES_RUBY_PASSWORD }}"
            ./deploy.sh

            # Cleanup
            rm -rf "/tmp/deploy-$APP_NAME"

            echo "🎉 Deployment completed for $APP_NAME"
