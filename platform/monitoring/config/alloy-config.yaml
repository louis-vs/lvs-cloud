---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // Grafana Alloy configuration for Kubernetes metrics and log collection

    // =====================================
    // METRICS COLLECTION
    // =====================================

    // Remote write endpoint for sending metrics to Mimir
    prometheus.remote_write "mimir" {
      endpoint {
        url = "http://mimir.monitoring.svc.cluster.local:8080/api/v1/push"
      }
    }

    // Scrape kubelet metrics
    discovery.kubernetes "kubelet" {
      role = "node"
    }

    prometheus.scrape "kubelet" {
      targets    = discovery.kubernetes.kubelet.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // Scrape pod metrics
    discovery.kubernetes "pods" {
      role = "pod"
    }

    // Relabel pods to find /metrics endpoints
    discovery.relabel "pods" {
      targets = discovery.kubernetes.pods.targets

      // Keep only pods with prometheus.io/scrape annotation
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
        action = "keep"
        regex = "true"
      }

      // Use custom metrics path if specified
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
        target_label = "__metrics_path__"
        regex = "(.+)"
      }

      // Use custom port if specified
      rule {
        source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
        target_label = "__address__"
        regex = "([^:]+)(?::\\d+)?;(\\d+)"
        replacement = "$1:$2"
      }

      // Add namespace label
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }

      // Add pod name label
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "pod"
      }
    }

    prometheus.scrape "pods" {
      targets    = discovery.relabel.pods.output
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // Scrape Mimir for self-monitoring
    prometheus.scrape "mimir" {
      targets = [
        {
          "__address__" = "mimir.monitoring.svc.cluster.local:8080",
          "job"        = "mimir",
        },
      ]
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // Scrape Loki for self-monitoring
    prometheus.scrape "loki" {
      targets = [
        {
          "__address__" = "loki.monitoring.svc.cluster.local:3100",
          "job"        = "loki",
        },
      ]
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // Scrape Tempo for self-monitoring
    prometheus.scrape "tempo" {
      targets = [
        {
          "__address__" = "tempo.monitoring.svc.cluster.local:3100",
          "job"        = "tempo",
        },
      ]
      forward_to = [prometheus.remote_write.mimir.receiver]
      scrape_interval = "30s"
    }

    // =====================================
    // LOG COLLECTION
    // =====================================

    // Discover all pods for log collection
    discovery.kubernetes "pod_logs" {
      role = "pod"
    }

    // Relabel for pod logs
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pod_logs.targets

      // Add namespace label
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }

      // Add pod name label
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "pod"
      }

      // Add container name label
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label = "container"
      }

      // Set the path to the log file
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label = "__path__"
        regex = "(.*);(.*)"
        replacement = "/var/log/pods/*$1*/*$2*/*.log"
      }
    }

    // Collect logs from pods
    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pods.receiver]
    }

    // Process logs before sending to Loki
    loki.process "pods" {
      // Parse JSON logs if present
      stage.json {
        expressions = {
          level       = "level",
          message     = "message",
          timestamp   = "timestamp",
        }
      }

      // Set labels
      stage.labels {
        values = {
          level = "level",
        }
      }

      forward_to = [loki.write.loki.receiver]
    }

    // Send logs to Loki
    loki.write "loki" {
      endpoint {
        url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      }
    }

    // Logging configuration
    logging {
      level = "info"
    }
