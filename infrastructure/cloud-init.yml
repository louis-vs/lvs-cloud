#cloud-config
users:
  - name: ubuntu
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ${ssh_key}
      - ${github_actions_ssh_key}

package_update: true
packages:
  - docker.io
  - docker-compose-v2
  - curl
  - wget
  - git
  - htop
  - apache2-utils # for htpasswd

write_files:
  - path: /opt/monitoring-stack/docker-compose.yml
    owner: ubuntu:ubuntu
    permissions: '0644'
    content: |
      # Placeholder - will be updated by GitHub Actions
      version: '3.8'
      services:
        placeholder:
          image: hello-world

  - path: /opt/traefik/docker-compose.yml
    owner: ubuntu:ubuntu
    permissions: '0644'
    content: |
      version: '3.8'

      services:
        traefik:
          image: traefik:v3.0
          container_name: traefik
          restart: unless-stopped
          ports:
            - "80:80"
            - "443:443"
          volumes:
            - /etc/traefik:/etc/traefik:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik-dashboard.rule=Host(\`traefik.lvs.me.uk\`)"
            - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
            - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
            - "traefik.http.routers.traefik-dashboard.service=api@internal"
          networks:
            - web

      networks:
        web:
          name: web
          external: true

  - path: /etc/docker/daemon.json
    owner: root:root
    permissions: '0644'
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "metrics-addr": "0.0.0.0:9323",
        "experimental": true
      }

runcmd:
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu

  # Create directory structure
  - mkdir -p /opt/monitoring-stack
  - mkdir -p /opt/traefik
  - mkdir -p /opt/apps
  - mkdir -p /var/lib/grafana
  - mkdir -p /var/lib/prometheus
  - mkdir -p /var/lib/loki
  - mkdir -p /var/lib/registry
  - mkdir -p /etc/traefik
  - mkdir -p /etc/prometheus
  - mkdir -p /etc/loki
  - mkdir -p /etc/grafana/provisioning/datasources
  - mkdir -p /etc/grafana/provisioning/dashboards
  - mkdir -p /etc/docker/registry/auth

  # Set permissions
  - chown -R ubuntu:ubuntu /opt/monitoring-stack
  - chown -R ubuntu:ubuntu /opt/traefik
  - chown -R ubuntu:ubuntu /opt/apps
  # Note: Container-specific user permissions will be handled by Docker

  # Create registry auth
  - htpasswd -Bbn "${registry_user}" "${registry_pass}" > /etc/docker/registry/auth/htpasswd

  # Create Traefik configuration and ACME file
  - |
    cat > /etc/traefik/traefik.yml << 'TRAEFIKEOF'
    api:
      dashboard: true
      insecure: false

    entryPoints:
      web:
        address: ":80"
        http:
          redirections:
            entrypoint:
              to: websecure
              scheme: https
              permanent: true

      websecure:
        address: ":443"

    providers:
      docker:
        endpoint: "unix:///var/run/docker.sock"
        exposedByDefault: false
        network: web

    certificatesResolvers:
      letsencrypt:
        acme:
          email: louis@lvs.me.uk
          storage: /etc/traefik/acme.json
          httpChallenge:
            entryPoint: web

    log:
      level: INFO

    accessLog: {}
    TRAEFIKEOF

  - touch /etc/traefik/acme.json
  - chmod 600 /etc/traefik/acme.json

  # Create basic Prometheus config
  - |
    cat > /etc/prometheus/prometheus.yml << 'PROMEOF'
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']
    PROMEOF

  # Create Loki config
  - |
    cat > /etc/loki/local-config.yaml << 'LOKIEOF'
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
      filesystem:
        directory: /loki/chunks

    limits_config:
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      allow_structured_metadata: false

    ruler:
      storage:
        type: local
        local:
          directory: /loki/rules
      rule_path: /loki/rules-temp
      alertmanager_url: http://localhost:9093
      ring:
        kvstore:
          store: inmemory
      enable_api: true
    LOKIEOF

  # Create Grafana datasources
  - |
    cat > /etc/grafana/provisioning/datasources/datasources.yml << 'GRAFEOF'
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
    GRAFEOF

  # Restart docker to apply daemon.json changes
  - systemctl restart docker

  # Wait for docker to be ready
  - sleep 10

  # Create networks
  - docker network create web 2>/dev/null || true
  # Note: monitoring network will be created by docker-compose when services start

  # Start Traefik (must be started first)
  - cd /opt/traefik && docker compose up -d

  # Create Loki data directories
  - mkdir -p /loki/{chunks,boltdb-shipper-active,boltdb-shipper-cache,rules,rules-temp}
  - chown -R 10001:10001 /loki

  - echo "Server setup complete - ready for GitOps deployment" > /var/log/setup.log
