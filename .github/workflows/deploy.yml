name: Deploy Infrastructure & Applications

on:
  push:
    branches: [master]
    paths:
      - 'infrastructure/**'
      - 'platform/**'
      - 'applications/**'
  workflow_dispatch:
    inputs:
      deploy_everything:
        description: 'Deploy entire stack (infrastructure, platform, and all apps)'
        required: false
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_VAR_project_name: 'lvs-cloud'
  TF_VAR_domain: 'lvs.me.uk'
  TF_VAR_registry_user: ${{ secrets.REGISTRY_USERNAME }}
  TF_VAR_registry_pass: ${{ secrets.REGISTRY_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
  REGISTRY_URL: registry.lvs.me.uk

jobs:
  infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    outputs:
      server_ip: ${{ steps.terraform-output.outputs.server_ip }}
      changed: ${{ steps.check-changes.outputs.changed }}

    defaults:
      run:
        working-directory: infrastructure

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for infrastructure changes
        id: check-changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Manual deployment of everything requested"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # Check if infrastructure files changed
          git diff --name-only HEAD^ HEAD | grep "^infrastructure/" || {
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          }
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.0'

      - name: Terraform Format
        run: terraform fmt -check
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Validate
        run: terraform validate
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan -detailed-exitcode
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}
        continue-on-error: true

      - name: Show Plan Summary
        run: terraform show tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

      - name: Request Approval for Infrastructure Changes
        if: steps.plan.outputs.exitcode == '2'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: 'Infrastructure Deployment Approval Required'
          issue-body: |
            **Infrastructure changes detected!**

            Terraform plan shows changes will be made to the infrastructure.

            **Review the plan output above** and approve this deployment to proceed.

            - **Branch**: `${{ github.ref_name }}`
            - **Commit**: `${{ github.sha }}`
            - **Triggered by**: ${{ github.event_name }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2')
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RW }}

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "server_ip=$(terraform output -raw server_ip)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN_RO }}

  platform-traefik:
    name: 'Deploy Traefik'
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Traefik"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Traefik"
            exit 0
          fi

          # Check if traefik files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/traefik/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Traefik files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Traefik
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "‚è≥ Waiting for system setup to complete..."
            sudo cloud-init status --wait || {
              echo "‚ùå Cloud-init failed or timed out"
              exit 1
            }

            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not available"
              exit 1
            fi

            sudo mkdir -p /opt/traefik
            sudo mkdir -p /etc/traefik
            sudo chown ubuntu:ubuntu /opt/traefik
            cd /opt/traefik

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/traefik/docker-compose.yml

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o /tmp/traefik.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/traefik/traefik.yml

            sudo cp /tmp/traefik.yml /etc/traefik/traefik.yml
            sudo docker compose up -d --remove-orphans
            echo "‚úÖ Traefik deployed successfully"

  platform-registry:
    name: 'Deploy Registry'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Registry"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Registry"
            exit 0
          fi

          # Check if registry files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/registry/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Registry files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Registry
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not available"
              exit 1
            fi

            sudo mkdir -p /opt/registry
            sudo mkdir -p /etc/docker/registry/auth
            sudo chown ubuntu:ubuntu /opt/registry
            cd /opt/registry

            # Generate htpasswd file for registry authentication
            echo "üîê Creating registry authentication..."
            sudo htpasswd -Bbn "${{ secrets.REGISTRY_USERNAME }}" "${{ secrets.REGISTRY_PASSWORD }}" | sudo tee /etc/docker/registry/auth/htpasswd

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/registry/docker-compose.yml

            sudo docker compose up -d --remove-orphans
            echo "‚úÖ Registry deployed successfully"

  platform-watchtower:
    name: 'Deploy Watchtower'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-registry]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying Watchtower"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying Watchtower"
            exit 0
          fi

          # Check if watchtower files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/watchtower/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Watchtower files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Watchtower
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not available"
              exit 1
            fi

            sudo mkdir -p /opt/watchtower
            sudo mkdir -p /etc/watchtower/config
            sudo chown ubuntu:ubuntu /opt/watchtower
            cd /opt/watchtower

            # Create registry authentication config for Watchtower
            echo "üîê Creating registry authentication for Watchtower..."
            AUTH_STRING=$(echo -n "${{ secrets.REGISTRY_USERNAME }}:${{ secrets.REGISTRY_PASSWORD }}" | base64 -w 0)
            sudo tee /etc/watchtower/config/config.json > /dev/null << EOF
            {
              "auths": {
                "registry.lvs.me.uk": {
                  "auth": "$AUTH_STRING"
                }
              }
            }
            EOF

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/watchtower/docker-compose.yml

            sudo docker compose up -d --remove-orphans
            echo "‚úÖ Watchtower deployed successfully"

  platform-postgresql:
    name: 'Deploy PostgreSQL'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik, platform-monitoring]
    if: always() && !cancelled() && !failure()
    outputs:
      changed: ${{ steps.check-changes.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ inputs.deploy_everything }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment of everything requested, redeploying PostgreSQL"
            exit 0
          fi

          if [[ "${{ needs.infrastructure.outputs.changed }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Infrastructure changed, redeploying PostgreSQL"
            exit 0
          fi

          # Check if postgresql files changed
          if git diff --name-only HEAD^ HEAD | grep "^platform/postgresql/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "PostgreSQL files changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not available"
              exit 1
            fi

            sudo mkdir -p /opt/postgresql
            sudo chown ubuntu:ubuntu /opt/postgresql
            cd /opt/postgresql

            cat > .env << 'EOF'
            POSTGRES_ADMIN_PASSWORD=${{ secrets.POSTGRES_ADMIN_PASSWORD }}
            POSTGRES_RUBY_PASSWORD=${{ secrets.POSTGRES_RUBY_PASSWORD }}
            POSTGRES_TS_PASSWORD=${{ secrets.POSTGRES_TS_PASSWORD }}
            POSTGRES_PYTHON_PASSWORD=${{ secrets.POSTGRES_PYTHON_PASSWORD }}
            POSTGRES_GO_PASSWORD=${{ secrets.POSTGRES_GO_PASSWORD }}
            EOF

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/docker-compose.yml

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o postgresql.conf \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/postgresql.conf

            mkdir -p init-scripts

            echo "üì• Downloading PostgreSQL initialization scripts..."

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o init-scripts/01-create-databases.sql \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/init-scripts/01-create-databases.sql" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o init-scripts/02-create-users.sql \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/init-scripts/02-create-users.sql" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o init-scripts/03-grant-permissions.sql \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/init-scripts/03-grant-permissions.sql" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o init-scripts/04-enable-extensions.sql \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/postgresql/init-scripts/04-enable-extensions.sql" &

            wait  # Wait for all downloads to complete
            echo "‚úÖ All PostgreSQL configuration files downloaded"

            # Replace placeholders in SQL scripts with actual environment variables
            sed -i "s/\${POSTGRES_RUBY_PASSWORD}/${{ secrets.POSTGRES_RUBY_PASSWORD }}/g" init-scripts/02-create-users.sql
            sed -i "s/\${POSTGRES_TS_PASSWORD}/${{ secrets.POSTGRES_TS_PASSWORD }}/g" init-scripts/02-create-users.sql
            sed -i "s/\${POSTGRES_PYTHON_PASSWORD}/${{ secrets.POSTGRES_PYTHON_PASSWORD }}/g" init-scripts/02-create-users.sql
            sed -i "s/\${POSTGRES_GO_PASSWORD}/${{ secrets.POSTGRES_GO_PASSWORD }}/g" init-scripts/02-create-users.sql

            sudo docker compose down 2>/dev/null || true
            sudo docker compose up -d --remove-orphans
            echo "‚úÖ PostgreSQL deployed successfully"

  platform-monitoring:
    name: 'Deploy Monitoring'
    runs-on: ubuntu-latest
    needs: [infrastructure, platform-traefik]
    if: always() && !cancelled() && !failure()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not available"
              exit 1
            fi

            sudo mkdir -p /opt/monitoring-stack
            sudo chown ubuntu:ubuntu /opt/monitoring-stack
            cd /opt/monitoring-stack

            cat > .env << 'EOF'
            GRAFANA_ADMIN_USER=admin
            GRAFANA_ADMIN_PASS=${{ secrets.GRAFANA_ADMIN_PASS }}
            EOF

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/docker-compose.prod.yml

            mkdir -p grafana/provisioning/{dashboards,datasources}
            mkdir -p loki mimir tempo alloy

            echo "üì• Downloading monitoring configuration files..."

            # Download all config files in parallel
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o mimir/mimir.yml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/mimir/mimir.yml" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o tempo/tempo.yml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/tempo/tempo.yml" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o loki/local-config.yaml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/loki/local-config.yaml" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o grafana/provisioning/datasources/datasources.yml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/grafana/provisioning/datasources/datasources.yml" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o grafana/provisioning/dashboards/dashboards.yml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/grafana/provisioning/dashboards/dashboards.yml" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o grafana/provisioning/dashboards/system-overview.json \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/grafana/provisioning/dashboards/system-overview.json" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o grafana/provisioning/dashboards/application-metrics.json \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/grafana/provisioning/dashboards/application-metrics.json" &

            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o alloy/config.alloy \
                 "https://api.github.com/repos/${{ github.repository }}/contents/platform/monitoring/alloy/config.alloy" &

            wait  # Wait for all downloads to complete
            echo "‚úÖ All configuration files downloaded"

            sudo docker compose down 2>/dev/null || true
            sudo docker network rm monitoring 2>/dev/null || true
            sudo docker compose up -d --remove-orphans
            echo "‚úÖ Monitoring stack deployed successfully"

  initial-app-deploy:
    name: 'Initial Application Deployment'
    runs-on: ubuntu-latest
    needs: [platform-registry, platform-watchtower]
    if: |
      always() && !cancelled() && !failure() &&
      (inputs.deploy_everything == 'true' || needs.infrastructure.outputs.changed == 'true')
    strategy:
      matrix:
        app: ["ruby-demo-app"]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get server IP
        id: server-ip
        run: |
          if [[ -n "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo "server_ip=${{ needs.infrastructure.outputs.server_ip }}" >> $GITHUB_OUTPUT
          else
            SERVER_IP=$(dig +short app.lvs.me.uk | head -1)
            if [ -z "$SERVER_IP" ]; then
              echo "‚ùå Error: Could not resolve server IP from app.lvs.me.uk"
              exit 1
            fi
            echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
            echo "‚úÖ Server IP: $SERVER_IP"
          fi

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.server-ip.outputs.server_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            APP_NAME="${{ matrix.app }}"
            APP_DIR="/opt/apps/$APP_NAME"
            echo "üöÄ Initial deployment for application: $APP_NAME"

            sudo mkdir -p "$APP_DIR"
            sudo chown ubuntu:ubuntu "$APP_DIR"
            cd "$APP_DIR"

            echo "üì• Downloading docker-compose.prod.yml..."
            curl -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 "https://api.github.com/repos/${{ github.repository }}/contents/applications/$APP_NAME/docker-compose.prod.yml"

            echo "üîë Logging into container registry..."
            echo "${{ secrets.REGISTRY_PASSWORD }}" | sudo docker login ${{ env.REGISTRY_URL }} \
                -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

            echo "üì¶ Pulling latest container image..."
            sudo docker compose pull

            echo "üîÑ Deploying application..."
            sudo docker compose up -d --remove-orphans

            sleep 5
            if sudo docker compose ps --services --filter "status=running" | grep -q .; then
              echo "‚úÖ Application $APP_NAME deployed successfully"
            else
              echo "‚ùå Application $APP_NAME deployment failed"
              sudo docker compose logs
              exit 1
            fi

            echo "üéâ Initial deployment completed for $APP_NAME"
